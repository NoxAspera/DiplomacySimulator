#include <iostream>
#include <map>
#include <string>
#include "./Provence.cpp"

using namespace std;

int main(int argc, char** argv)
{
    //a collection of provences and their immediate connections
    vector<provence> provences;
    vector<string> adjacent ({"MAO", "IRI", "CLY", "LVP"});
    provence newProvence = provence("NAO", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"NAO", "MAO", "WAL", "LVP", "ENG"};
    newProvence = provence("IRI", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"NAO", "SPA", "POR", "BRE", "ENG", "GAS", "WES", "NAF"};
    newProvence = provence("MAO", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"MAO", "SPA"};
    newProvence = provence("POR", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"MAO", "POR", "MAR", "LYO", "GAS", "WES"};
    newProvence = provence("SPA", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"MAO", "WES", "TUN"};
    newProvence = provence("NAF", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NAF", "WES", "TYS", "ION"};
    newProvence = provence("TUN", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NAF", "TUN", "TYS", "LYO", "SPA"};
    newProvence = provence("WES", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"WES", "SPA", "MAR", "TYS", "PIE", "TUS"};
    newProvence = provence("LYO", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"LYO", "SPA", "GAS", "BUR", "PIE"};
    newProvence = provence("MAR", adjacent, true, 'c', 'f');
    provences.push_back(newProvence);
    adjacent = {"MAO", "SPA", "MAR", "BRE", "BUR", "PAR"};
    newProvence = provence("GAS", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"MAO", "ENG", "PIC", "GAS", "PAR"};
    newProvence = provence("BRE", adjacent, true, 'c', 'f');
    provences.push_back(newProvence);
    adjacent = {"BRE", "PIC", "GAS", "BUR"};
    newProvence = provence("PAR", adjacent, true, 'l', 'f');
    provences.push_back(newProvence);
    adjacent = {"PAR", "ENG", "BEL", "BRE"};
    newProvence = provence("PIC", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"PAR", "MAR", "BEL", "RUH", "MUN", "GAS"};
    newProvence = provence("BUR", adjacent, false, 'l', 'n');
    provences.push_back(newProvence);
    adjacent = {"IRI", "ENG", "LIV", "YOR", "LON"};
    newProvence = provence("WAL", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"WAL", "ENG", "NTH", "YOR"};
    newProvence = provence("LON", adjacent, true, 'c', 'e');
    provences.push_back(newProvence);
    adjacent = {"LON", "NTH", "LIV", "WAL", "EDI"};
    newProvence = provence("YOR", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NTH" "NWG", "CLY", "EDI", "YOR"};
    newProvence = provence("EDI", adjacent, true, 'c', 'e');
    provences.push_back(newProvence);
    adjacent = {"LIV", "NAO", "NWG", "EDI"};
    newProvence = provence("CLY", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NAO", "IRI", "EDI", "YOR", "WAL", "CLY"};
    newProvence = provence("LIV", adjacent, true, 'c', 'e');
    provences.push_back(newProvence);
    adjacent = {"CLY", "EDI", "NAO", "NTH", "NWY", "BAR"};
    newProvence = provence("NWG", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"LON", "YOR", "EDI", "NWG", "NWY", "SKA", "DEN", "GER", "HOL", "BEL"};
    newProvence = provence("NTH", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"STP", "BAR", "NWG", "SKA", "NTH", "SWE", "FIN"};
    newProvence = provence("NWY", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NWY", "SWE", "DEN", "NTH"};
    newProvence = provence("SKA", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"SKA", "NTH", "GER", "SWE", "BAL", "KEL"};
    newProvence = provence("DEN", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NTH", "HOL", "DEN", "KIE"};
    newProvence = provence("GER", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"GER", "NTH", "BEL", "KIE", "RUH"};
    newProvence = provence("HOL", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"ENG", "HOL", "PIC", "RUH", "BUR", "NTH"};
    newProvence = provence("BEL", adjacent, true, 'c', 'n');
    provences.push_back(newProvence);
    adjacent = {"NTH", "HOL", "DEN", "KIE"};
    newProvence = provence("GER", adjacent, false, 's', 'n');
    provences.push_back(newProvence);
    adjacent = {"BEL", "HOL", "MUN", "KIE", "BUR"};
    newProvence = provence("RUH", adjacent, false, 'l', 'n');
    provences.push_back(newProvence);
    adjacent = {"GER", "HOL", "DEN", "BAL", "BER", "MUN"};
    newProvence = provence("KIE", adjacent, true, 'c', 'g');
    provences.push_back(newProvence);
    adjacent = {"RUH", "BUR", "BER", "KIE", "SIL", "BOH", "TYR"};
    newProvence = provence("MUN", adjacent, true, 'l', 'g');
    provences.push_back(newProvence);
    adjacent = {"BAL", "PRU", "SIL", "MUN", "KIE"};
    newProvence = provence("BER", adjacent, true, 'c', 'g');
    provences.push_back(newProvence);
    adjacent = {"MUN", "BER", "BOH", "PRU", "WAR", "GAL"};
    newProvence = provence("SIL", adjacent, false, 'l', 'n');
    provences.push_back(newProvence);
    adjacent = {"BAL", "LVN", "WAR", "SIL", "BER"};
    newProvence = provence("PRU", adjacent, false, 'c', 'n');
    provences.push_back(newProvence);
};